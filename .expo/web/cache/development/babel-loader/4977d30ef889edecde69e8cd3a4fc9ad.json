{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { ApolloClient, InMemoryCache, ApolloProvider, useQuery, gql } from \"@apollo/client\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport HomeScreen from \"./Screens/Home\";\nimport CurrentVisitScreen from \"./Screens/CurrentVisit\";\nimport SignInScreen from \"./Screens/SignIn\";\nimport * as Config from \"./Config\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var AppContext = React.createContext({\n  storeToken: function storeToken(new_token) {},\n  apolloClient: ApolloClient,\n  refreshClient: function refreshClient() {}\n});\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this);\n    _this.state = {\n      storeToken: _this.storeToken,\n      apolloClient: _this.buildClient(),\n      refreshClient: _this.buildClient\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"storeToken\",\n    value: function storeToken(new_token) {\n      return _regeneratorRuntime.async(function storeToken$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('token', new_token));\n\n            case 3:\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 5]], Promise);\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      var stored_token;\n      return _regeneratorRuntime.async(function getToken$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('token'));\n\n            case 3:\n              stored_token = _context2.sent;\n              return _context2.abrupt(\"return\", stored_token);\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n              return _context2.abrupt(\"return\", null);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 7]], Promise);\n    }\n  }, {\n    key: \"buildClient\",\n    value: function buildClient() {\n      var token, ok;\n      return _regeneratorRuntime.async(function buildClient$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              console.log(\"Building global apollo client WITH URL: '\" + Config.SERVER_URL + \"'.\");\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(this.getToken());\n\n            case 3:\n              token = _context3.sent;\n\n              if (token !== null) {\n                console.log(\"Building global apollo client WITH TOKEN: '\" + {\n                  token: token\n                } + \"'.\");\n              } else {\n                console.log('Building global apollo client WITHOUT token.');\n                console.log('HERE');\n\n                try {\n                  ok = new ApolloClient({\n                    uri: Config.SERVER_URL\n                  });\n                  console.log('HERE');\n                  this.setState(function (state) {\n                    return {\n                      apolloClient: ok\n                    };\n                  });\n                } catch (e) {\n                  console.log(e);\n                }\n              }\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var Stack = createNativeStackNavigator();\n      return _jsx(ApolloProvider, {\n        client: this.state.apolloClient,\n        children: _jsx(AppContext.Provider, {\n          value: this.state,\n          children: _jsx(NavigationContainer, {\n            children: _jsxs(Stack.Navigator, {\n              initialRouteName: \"SignIn\",\n              children: [_jsx(Stack.Screen, {\n                name: \"SignIn\",\n                component: SignInScreen,\n                options: {\n                  headerShown: false\n                }\n              }), _jsx(Stack.Screen, {\n                name: \"Home\",\n                component: HomeScreen,\n                options: {\n                  headerShown: false\n                }\n              }), _jsx(Stack.Screen, {\n                name: \"CurrentVisit\",\n                component: CurrentVisitScreen,\n                options: {\n                  headerShown: false\n                }\n              })]\n            })\n          })\n        })\n      });\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/home/Documents/Workbench/Classwork/455 Mobile UX/455-project-1/App.js"],"names":["React","NavigationContainer","createNativeStackNavigator","ApolloClient","InMemoryCache","ApolloProvider","useQuery","gql","AsyncStorage","HomeScreen","CurrentVisitScreen","SignInScreen","Config","AppContext","createContext","storeToken","new_token","apolloClient","refreshClient","App","state","buildClient","setItem","console","log","getItem","stored_token","SERVER_URL","getToken","token","ok","uri","setState","e","Stack","headerShown","Component"],"mappings":"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","sourcesContent":["/**\n * BVxAndroid\n * Philip Ottenbreit\n *\n * repository-started: 2022-apr-11, 10:00pm\n *\n */\n\n 'use strict';\n\n import React from 'react';\n \n // NAVIGATION\n import { NavigationContainer } from '@react-navigation/native';\n import { createNativeStackNavigator } from '@react-navigation/native-stack';\n \n // API\n import {\n   ApolloClient,\n   InMemoryCache,\n   ApolloProvider,\n   useQuery,\n   gql\n } from \"@apollo/client\";\n \n import AsyncStorage from '@react-native-async-storage/async-storage'; \n\n \n // SCREENS\n import HomeScreen from './Screens/Home';\n import CurrentVisitScreen from './Screens/CurrentVisit';\n import SignInScreen from './Screens/SignIn';\n import * as Config from './Config';\n \n /**\n  * App-global state, published as app root\n  */\n export const AppContext = React.createContext({\n   storeToken: (new_token) => {},\n   apolloClient: ApolloClient,\n   refreshClient: () => {},\n });\n \n /**\n  * Main application export\n  */\n export default class App extends React.Component {\n   constructor() {\n     super();\n \n     this.state = {\n       storeToken: this.storeToken,\n       apolloClient: this.buildClient(),\n       refreshClient: this.buildClient,\n     };\n   }\n \n   async storeToken(new_token) {\n     try {\n       await AsyncStorage.setItem('token', new_token);\n     } catch (e) {\n       console.log(e);\n     }\n   }\n \n   //If 'token' is not set, returns null\n   async getToken() {\n     try {\n       const stored_token = await AsyncStorage.getItem('token');\n       return stored_token;\n     } catch (e) {\n       console.log(e);\n       return null;\n     }\n   }\n \n   //Sets the ApolloClient with authorization IF 'token' is set\n   async buildClient() {\n     console.log(\n       \"Building global apollo client WITH URL: '\" + Config.SERVER_URL + \"'.\"\n     );\n \n     const token = await this.getToken();\n \n     if (token !== null) {\n       console.log(\n         \"Building global apollo client WITH TOKEN: '\" + { token } + \"'.\"\n       );\n     } else {\n       console.log('Building global apollo client WITHOUT token.');\n       console.log('HERE');\n \n       try {\n         const ok = new ApolloClient({\n           uri: Config.SERVER_URL,\n           // headers: {\n           //   authorization: token,\n           //   'client-name': 'BVxAndroid',\n           //   'client-version': '1.0.0',\n           // },\n         });\n \n         console.log('HERE');\n \n         this.setState((state) => ({\n           apolloClient: ok,\n         }));\n       } catch (e) {\n         console.log(e);\n       }\n     }\n   }\n \n   render() {\n     const Stack = createNativeStackNavigator();\n \n     return (\n       <ApolloProvider client={this.state.apolloClient}>\n         <AppContext.Provider value={this.state}>\n           <NavigationContainer>\n             <Stack.Navigator initialRouteName=\"SignIn\">\n               <Stack.Screen\n                 name=\"SignIn\"\n                 component={SignInScreen}\n                 options={{ headerShown: false }}\n               />\n               <Stack.Screen\n                 name=\"Home\"\n                 component={HomeScreen}\n                 options={{ headerShown: false }}\n               />\n               <Stack.Screen\n                 name=\"CurrentVisit\"\n                 component={CurrentVisitScreen}\n                 options={{ headerShown: false }}\n               />\n             </Stack.Navigator>\n           </NavigationContainer>\n         </AppContext.Provider>\n       </ApolloProvider>\n     );\n   }\n }\n "]},"metadata":{},"sourceType":"module"}